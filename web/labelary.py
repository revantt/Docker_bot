import requests
from time import sleep
from applicationsConstants import *
from utils import convertBase64toImage, printColoured
from applicationsMapConstants import LABELARY_PDF_HEADERS

class Labelary():
    """ class to convert the ZPL stream to PNG or PDF file """

    def __init__(self, labelDpi, labelSize, labelType, region=None):
        """
        Constructor for Labelary.

        Parameters
        ----------
        labelDpi: int
            The desired print density, in dots per millimeter.
            Valid values are 6dpmm, 8dpmm, 12dpmm, and 24dpmm.
        labelSize: str
            The label width and height, in inches. Example: 4x6, 6x6.
        labelType: str
            label type PNG or PDF.
        region: str
            Represents region for which label have to be generated.
            Valid values are NRT, FE, NA, EU.
        """
        self.labelDpi = labelDpi
        self.labelSize = labelSize
        self.labelType = labelType
        self.region  = region
        self.url = f'{LABELARY_API_BASE_URL}{labelDpi}dpmm/labels/{labelSize}/0/'

    def setHeaders(self):
        """
        Method use to set the labelary headers on the basis of labelType.

        Parameters
        ----------
        labelType: str
            label type PNG or PDF.
        """
        headers = {}
        if self.labelType == PDF_LABEL_TYPE:
            headers = LABELARY_PDF_HEADERS
        return headers

    def addCFJToZPLStream(self, zplStream):
        """
        Method use to add ^CFJ to the ZPL Stream in case of NRT region.

        Parameters
        ----------
        zplStream: str
            ZPL stream to which we have to add ^CFJ.

        Returns
        -------
            ^CFJ added string.
        """
        return zplStream.replace("XA\n", "^XA\n^CFJ\n")

    def generateLabelFromZplStream(self, zplStream, labelType, outputImagePath):
        """
        Method use to generate the label using the Labelary API.

        Parameters
        ----------
        zplStream: str
            ZPL stream which needs to be converted to PNG or PDF.
        labelType: str
            label type PNG or PDF.
        outputImagePath: str
            Path of the output image generated by Labelary.
        """
        if self.region == FE_REGION_CODE or self.region == NRT_REGION_CODE:
            zplStream = bytes(self.addCFJToZPLStream(zplStream.decode()), encoding='utf8')
        files = {'file': zplStream}
        headers = self.setHeaders()
        labelaryResponse = requests.post(self.url, headers=headers, files=files, stream=True)
        if labelaryResponse.status_code == 200:
            labelaryResponse.raw.decode_content = True
            convertBase64toImage(labelaryResponse.raw.data, outputImagePath)
        elif labelaryResponse.status_code == 429:
            sleep(0.5)
            self.generateLabelFromZplStream(zplStream, labelType, outputImagePath)
        else:
            printColoured(f'[ERROR]: {labelaryResponse.text}', "red")